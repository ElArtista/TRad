#version 430 core
layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
layout(rgba16f, binding = 0) uniform image2D accumulated;
layout(rgba16f, binding = 1) uniform image2D unshot;

layout(binding = 0) uniform sampler2D position;
layout(binding = 1) uniform sampler2D normal;
layout(binding = 2) uniform sampler2D albedo;
layout(binding = 3) uniform sampler2D visible;

layout(std430, binding = 0) buffer shooter_info_buf {
    ivec2 shooter_coords;
     vec3 shooter_position;
     vec3 shooter_normal;
     vec4 shooter_unshot;
};

uniform mat4 view_proj[5];

float visibility(
    ivec2 st,       // Shooter coords
    vec3 pos,       // Shooter position
    const int lres, // Lightmap resolution
    const int hres) // Hemicube resolution
{
    vec4 proj_pos;
    vec2 vco, xuv; ivec2 vis;
    vec2 offsets[] = {
        vec2(3*hres/4,   hres/4),
        vec2( -hres/4,   hres/4),
        vec2(  hres/4, 3*hres/4),
        vec2(  hres/4,  -hres/4),
        vec2(  hres/4)
    };
    float size = hres / 2 - 1;

    // +X
    proj_pos  = view_proj[0] * vec4(pos, 1.0);
    proj_pos /= proj_pos.w;
    vco = offsets[0] + (proj_pos.xy * 0.5 + 0.5) * size;
    xuv = texelFetch(visible, ivec2(vco), 0).xy;
    vis = ivec2(xuv * vec2(lres));
    if (vis == st)
        return 1.0;

    // -X
    proj_pos  = view_proj[1] * vec4(pos, 1.0);
    proj_pos /= proj_pos.w;
    vco = offsets[1] + (proj_pos.xy * 0.5 + 0.5) * size;
    xuv = texelFetch(visible, ivec2(vco), 0).xy;
    vis = ivec2(xuv * vec2(lres));
    if (vis == st)
        return 1.0;

    // +Y
    proj_pos  = view_proj[2] * vec4(pos, 1.0);
    proj_pos /= proj_pos.w;
    vco = offsets[2] + (proj_pos.xy * 0.5 + 0.5) * size;
    xuv = texelFetch(visible, ivec2(vco), 0).xy;
    vis = ivec2(xuv * vec2(lres));
    if (vis == st)
        return 1.0;

    // -Y
    proj_pos  = view_proj[3] * vec4(pos, 1.0);
    proj_pos /= proj_pos.w;
    vco = offsets[3] + (proj_pos.xy * 0.5 + 0.5) * size;
    xuv = texelFetch(visible, ivec2(vco), 0).xy;
    vis = ivec2(xuv * vec2(lres));
    if (vis == st)
        return 1.0;

    // -Z
    proj_pos  = view_proj[4] * vec4(pos, 1.0);
    proj_pos /= proj_pos.w;
    vco = offsets[4] + (proj_pos.xy * 0.5 + 0.5) * size;
    xuv = texelFetch(visible, ivec2(vco), 0).xy;
    vis = ivec2(xuv * vec2(lres));
    if (vis == st)
        return 1.0;

    return 0.0;
}

vec3 form_factor_energy(
    vec3 recv_pos,     // World-space position of this element
    vec3 shoot_pos,    // World-space position of shooter
    vec3 recv_normal,  // World-space normal of this element
    vec3 shoot_normal, // World-space normal of shooter
    vec3 shoot_energy, // Energy from shooter unshot texture
    float shoot_darea, // The delta area of the shooter
    vec3 recv_color)   // The reflectivity of this element
{
    // A normalized vector from shooter to receiver
    vec3 r = shoot_pos - recv_pos;
    float distance2 = dot(r, r);
    r = normalize(r);
    // The angles of the receiver and the shooter from r
    float cosi = dot(recv_normal, r);
    float cosj = -dot(shoot_normal, r);
    // Compute the disc approximation form factor
    const float pi = 3.1415926535;
    float Fij = max(cosi * cosj, 0) / (pi * distance2 + shoot_darea);
    // Modulate shooter's energy by the receiver's reflectivity
    // and the area of the shooter.
    vec3 delta = shoot_energy * recv_color * shoot_darea * Fij;
    return delta;
}

void radiosity()
{
    const int lres = 128; // Lightmap resolution
    const int hres = 256; // Hemicube resolution
    ivec2 st = ivec2(gl_GlobalInvocationID.xy);

    // Recv values
    vec4 pos = texelFetch(position, st, 0);
    vec3 nrm = normalize(texelFetch(normal, st, 0).rgb);
    vec3 alb = texelFetch(albedo, st, 0).rgb;
    vec3 acc = imageLoad(accumulated, st).rgb;
    vec3 ush = imageLoad(unshot, st).rgb;

    // Shooter values
    vec3 sun = shooter_unshot.rgb;
    vec3 spo = shooter_position;
    vec3 snm = normalize(shooter_normal);

    // Calculate form factor energy
    //float area = 450.0;
    float area = 650.0;
    vec3 gi = form_factor_energy(
        pos.xyz, spo, nrm,
        snm, sun, area, alb
    ) * visibility(st, pos.xyz, lres, hres);

    // Add gi to both accumulated and unshot values of the recv
    imageStore(accumulated, st, vec4(acc + gi, 1.0));
    imageStore(unshot, st, vec4(ush + gi, 1.0));
}

void main()
{
    radiosity();
}
